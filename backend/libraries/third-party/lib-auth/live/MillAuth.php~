<?php

require_once "Auth.php";
require_once "Auth/Container.php";

define('MILL_AUTH_AD','mill-sms.mill.co.uk');
define('MILL_AUTH_COOKIE','mill-auth');
define('MILL_AUTH_KEY','asudbvkdgqea');
define('MILL_AUTH_TIMEOUT',60*60*8);

/*
** Extend the PEAR Auth class with extra functionality
*/
class MillAuth Extends Auth
{
   function start()
   {
      $this->log('Auth::start() called.', AUTH_LOG_DEBUG);

      $this->setLoginCallback(array($this,"setAuthCookie"));

      if ($this->regenerateSessionId)
      {
         session_regenerate_id(true);
      }

      $this->assignData();
      if (!$this->checkAuth() && $this->allowLogin)
      {
         $this->login();
      }
   }

   function checkAuth()
   {
      /*
      ** If Cookie isn't set, return false
      */
      if (!isset($_COOKIE[MILL_AUTH_COOKIE]))
      {
         return false;
      }
      else
      {
         /*
	 ** Found Cookie, check data
	 */
         $data = json_decode($this->decryptData($_COOKIE[MILL_AUTH_COOKIE]),true);

         /*
	 ** Couldn't find required variables, return false
	 */
	 if (!isset($data["username"]) || !isset($data["expires"]) || !isset($data["ip"]))
	 {
	    return false;
         }

         /*
	 ** Registered IP doesn't match client IP, return false
	 */
	 if ($data["ip"] != $_SERVER['REMOTE_ADDR'])
	 {
	    return false;
         }

         /*
	 ** Check Cookie hasn't expired
	 */
	 $time_diff = $data["expires"] - time();
	 if ($time_diff <= MILL_AUTH_TIMEOUT)
	 {
	    $this->setAuthCookie($data["username"]);
	    return true;
         }
	 else
	 {
	    $this->destroyAuthCookie();
            return false;
         }
      }
   }

   /*
   ** Print Cookie Contents
   */
   function showAuthInfo()
   {
      if (isset($_COOKIE[MILL_AUTH_COOKIE]))
      {
         $data = json_decode($this->decryptData($_COOKIE[MILL_AUTH_COOKIE]),true);
	 print_r($data);
      }
   }

   /*
   ** Return Username Stored In Cookie
   */
   function getUsername()
   {
      if (isset($_COOKIE[MILL_AUTH_COOKIE]))
      {
         $data = json_decode($this->decryptData($_COOKIE[MILL_AUTH_COOKIE]),true);

	 return $data["username"];
      }
      else
      {
         return "";
      }
   }

   /*
   ** Logout
   */
   function logout()
   {
      if (isset($_COOKIE[MILL_AUTH_COOKIE]))
      {
         $this->destroyAuthCookie();
	 unset($_COOKIE[MILL_AUTH_COOKIE]);
      }
   }

   /*
   ** Destroy the cookie
   */
   function destroyAuthCookie()
   {
      $expire = time() - (60*60*24*365*8);
      $path = "/";
      $domain = ".the-mill.com";

      setcookie(MILL_AUTH_COOKIE,"",$expire,$path,$domain);
   }

   /*
   ** Create/Update Cookie
   */
   function setAuthCookie($username,$ref = null)
   {
      $value = $username;
      $expire = time() + MILL_AUTH_TIMEOUT;
      $path = "/";
      $domain = ".the-mill.com";

      $data = json_encode(array("username"=>$username,"expires"=>$expire,"ip"=>$_SERVER['REMOTE_ADDR']));

      $result = setcookie(MILL_AUTH_COOKIE,$this->encryptData($data),$expire,$path,$domain);

      if ($result == true)
      {
         $_COOKIE[MILL_AUTH_COOKIE] = $this->encryptData($data);
      }
      return $result;
   }

   /*
   ** Encrypt Data
   */
   function encryptData($value)
   {
      if(!$value)
      {
         return false;
      }

      $text = $value;
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256,MCRYPT_MODE_ECB);
      $iv = mcrypt_create_iv($iv_size,MCRYPT_RAND);
      $crypttext = mcrypt_encrypt(MCRYPT_RIJNDAEL_256,MILL_AUTH_KEY,$text,MCRYPT_MODE_ECB,$iv);
      return trim(base64_encode($crypttext)); //encode for cookie
   }

   /*
   ** Decrypt Data
   */
   function decryptData($value)
   {
      if(!$value)
      {
         return false;
      }

      $crypttext = base64_decode($value); //decode cookie
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256,MCRYPT_MODE_ECB);
      $iv = mcrypt_create_iv($iv_size,MCRYPT_RAND);
      $decrypttext = mcrypt_decrypt(MCRYPT_RIJNDAEL_256,MILL_AUTH_KEY,$crypttext,MCRYPT_MODE_ECB,$iv);
      return trim($decrypttext);
   }
}

class MillAuthContainer extends Auth_Container
{
   /*
   ** Check Username & Password with AD
   */
   function fetchData($username,$password)
   {
      if (!isset($_SERVER['REMOTE_ADDR']))
      {
         return false;
      }

      if ($username == null || $password == null)
      {
         return false;
      }

      $base_dn = "DC=mill,DC=co,DC=uk";

      $ad = @ldap_connect("ldap://".MILL_AUTH_AD);

      @ldap_set_option($ad,LDAP_OPT_PROTOCOL_VERSION,3);
      @ldap_set_option($ad,LDAP_OPT_REFERRALS,0);

      $bind = @ldap_bind($ad,$username."@mill.co.uk",$password);

      if($bind != false)
      {
         @ldap_unbind($ad);
         $this->auth_status = "Active Directory";
         return true;
      }

      return false;
   }

   function fetchAuthType()
   {
      return $this->auth_status;
   }
}

?>
